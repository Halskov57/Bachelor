type User {
    id: ID!
    username: String!
    role: String!
    projects: [Project!]!
}

type Project {
    id: ID!
    title: String!
    description: String
    courseLevel: Int
    depth: Int
    createdOn: String
    owner: User!
    owners: [User!]!
    epics: [Epic!]
}

type Epic {
    id: ID!
    title: String!
    description: String
    features: [Feature!]
}

type Feature {
    id: ID!
    title: String!
    description: String
    tasks: [Task!]
}

type Task {
    id: ID!
    title: String!
    description: String
    status: String!
    users: [User!]!
}

type CourseLevelConfig {
    id: ID!
    courseLevel: Int!
    features: [FeatureConfig!]!
    templateProject: Project
}

type FeatureConfig {
    key: String!
    enabled: Boolean!
}

input FeatureConfigInput {
    key: String!
    enabled: Boolean!
}

type Query {
    users: [User!]!
    userByUsername(username: String!): User
    projects: [Project!]!
    projectsByUsername(username: String!): [Project!]!
    projectById(id: ID!): Project
    courseLevelConfig(courseLevel: Int!): CourseLevelConfig
    allCourseLevelConfigs: [CourseLevelConfig!]!
    nonSuperAdminUsers: [User!]!
}

type Mutation {
    updateUserUsername(id: ID!, newUsername: String!): User!
    updateProjectTitle(projectId: ID!, newTitle: String!): Project!
    updateProjectDescription(projectId: ID!, newDescription: String!): Project!
    updateProjectCourseLevel(projectId: ID!, newCourseLevel: Int!): Project!
    updateEpicTitle(projectId: ID!, epicId: ID!, newTitle: String!): Epic!
    updateEpicDescription(projectId: ID!, epicId: ID!, newDescription: String!): Epic!
    updateFeatureTitle(projectId: ID!, epicId: ID!, featureId: ID!, newTitle: String!): Feature!
    updateFeatureDescription(projectId: ID!, epicId: ID!, featureId: ID!, newDescription: String!): Feature!
    updateTaskTitle(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newTitle: String!): Task!
    updateTaskDescription(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newDescription: String!): Task!
    updateTaskStatus(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newStatus: String!): Task!
    updateTaskUsers(
        projectId: ID!,
        epicId: ID!,
        featureId: ID!,
        taskId: ID!,
        userIds: [ID!]!
    ): Task!
    deleteEpic(projectId: ID!, epicId: ID!): Boolean!
    deleteFeature(projectId: ID!, epicId: ID!, featureId: ID!): Boolean!
    deleteTask(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!): Boolean!
    addEpic(projectId: ID!, title: String!, description: String): Epic!
    addFeature(projectId: ID!, epicId: ID!, title: String!, description: String): Feature!
    addTask(projectId: ID!, epicId: ID!, featureId: ID!, title: String!, description: String): Task!
    updateCourseLevelConfig(
        courseLevel: Int!,
        features: [FeatureConfigInput!]!
    ): CourseLevelConfig!
    setTemplateProject(courseLevel: Int!, projectId: ID!): CourseLevelConfig!
    createProjectFromTemplate(courseLevel: Int!, title: String!, description: String!): Project!
    updateUserRole(username: String!, newRole: String!): User!
}

type Subscription {
    # Project-level subscriptions (filtered by project ID)
    taskUpdated(projectId: ID!): Task!
    epicUpdated(projectId: ID!): Epic!
    featureUpdated(projectId: ID!): Feature!
    
    # Task assignment updates
    taskAssignmentUpdated(projectId: ID!): TaskAssignmentUpdate!
    
    # Task status changes
    taskStatusChanged(projectId: ID!): TaskStatusUpdate!
    
    # Creation/deletion events
    taskDeleted(projectId: ID!): TaskDeletedEvent!
    featureDeleted(projectId: ID!): FeatureDeletedEvent!
    epicDeleted(projectId: ID!): EpicDeletedEvent!
    
    # Project structure changes
    projectStructureUpdated(projectId: ID!): StructureUpdate!
    
    # User activity tracking
    userActivityUpdated(projectId: ID!): UserActivity!
    
    # Legacy subscriptions (kept for backwards compatibility)
    projectAdded: Project!
    epicAdded: Epic!
    featureAdded: Feature!
    taskAdded: Task!
    userUpdated(id: ID): User!
    projectUpdated(id: ID): Project!
}

# Real-time update types
type TaskAssignmentUpdate {
    taskId: ID!
    assignedUsers: [User!]!
    updatedBy: User!
}

type TaskStatusUpdate {
    id: ID!
    status: String!
    title: String!
    updatedBy: User!
}

type TaskDeletedEvent {
    id: ID!
    title: String!
    featureId: ID!
    epicId: ID!
    deletedBy: User!
}

type FeatureDeletedEvent {
    id: ID!
    title: String!
    epicId: ID!
    deletedBy: User!
}

type EpicDeletedEvent {
    id: ID!
    title: String!
    deletedBy: User!
}

type StructureUpdate {
    type: String!
    action: String!
    data: StructureUpdateData!
    updatedBy: User!
}

type StructureUpdateData {
    id: ID!
    title: String!
    type: String!
    parentId: String
}

type UserActivity {
    userId: ID!
    username: String!
    action: String!
    targetType: String!
    targetId: ID!
    targetTitle: String!
    timestamp: String!
}