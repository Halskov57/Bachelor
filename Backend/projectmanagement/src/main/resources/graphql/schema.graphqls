type User {
    id: ID!
    username: String!
    role: String!
    projects: [Project!]!
}

type Project {
    id: ID!
    title: String!
    description: String
    courseLevel: Int
    depth: Int
    createdOn: String
    owner: User!
    owners: [User!]!
    epics: [Epic!]
}

type Epic {
    id: ID!
    title: String!
    description: String
    features: [Feature!]
}

type Feature {
    id: ID!
    title: String!
    description: String
    tasks: [Task!]
}

type Task {
    id: ID!
    title: String!
    description: String
    status: String!
    users: [User!]!
}

type CourseLevelConfig {
    id: ID!
    courseLevel: Int!
    features: [FeatureConfig!]!
}

type FeatureConfig {
    key: String!
    enabled: Boolean!
}

input FeatureConfigInput {
    key: String!
    enabled: Boolean!
}

type Query {
    users: [User!]!
    userByUsername(username: String!): User
    projects: [Project!]!
    projectsByUsername(username: String!): [Project!]!
    projectById(id: ID!): Project
    courseLevelConfig(courseLevel: Int!): CourseLevelConfig
    allCourseLevelConfigs: [CourseLevelConfig!]!
    nonSuperAdminUsers: [User!]!
}

type Mutation {
    updateUserUsername(id: ID!, newUsername: String!): User!
    updateProjectTitle(projectId: ID!, newTitle: String!): Project!
    updateProjectDescription(projectId: ID!, newDescription: String!): Project!
    updateProjectCourseLevel(projectId: ID!, newCourseLevel: Int!): Project!
    updateEpicTitle(projectId: ID!, epicId: ID!, newTitle: String!): Epic!
    updateEpicDescription(projectId: ID!, epicId: ID!, newDescription: String!): Epic!
    updateFeatureTitle(projectId: ID!, epicId: ID!, featureId: ID!, newTitle: String!): Feature!
    updateFeatureDescription(projectId: ID!, epicId: ID!, featureId: ID!, newDescription: String!): Feature!
    updateTaskTitle(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newTitle: String!): Task!
    updateTaskDescription(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newDescription: String!): Task!
    updateTaskStatus(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!, newStatus: String!): Task!
    updateTaskUsers(
        projectId: ID!,
        epicId: ID!,
        featureId: ID!,
        taskId: ID!,
        userIds: [ID!]!
    ): Task!
    deleteEpic(projectId: ID!, epicId: ID!): Boolean!
    deleteFeature(projectId: ID!, epicId: ID!, featureId: ID!): Boolean!
    deleteTask(projectId: ID!, epicId: ID!, featureId: ID!, taskId: ID!): Boolean!
    addEpic(projectId: ID!, title: String!, description: String): Epic!
    addFeature(projectId: ID!, epicId: ID!, title: String!, description: String): Feature!
    addTask(projectId: ID!, epicId: ID!, featureId: ID!, title: String!, description: String): Task!
    updateCourseLevelConfig(
        courseLevel: Int!,
        features: [FeatureConfigInput!]!
    ): CourseLevelConfig!
    updateUserRole(username: String!, newRole: String!): User!
}

type Subscription {
    projectAdded: Project!
}
